<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.senior.dao.MeetingDao">
    <resultMap type="com.senior.domain.bo.response.MeetingQueryBoResponse" id="MeetingMap">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="content" column="content"/>
        <result property="roomId" column="room_id"/>
        <result property="accountIds" column="account_ids"
                typeHandler="com.senior.dao.typehandler.DelimitedLongTypeHandler"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="faceImage" column="face_image"/>
    </resultMap>

    <sql id="Base_Column">
        Meeting
        .
        id
        , Meeting.name, Meeting.content, Meeting.room_id, Meeting.account_ids, Meeting.create_time, Meeting.update_time,Meeting.face_image   </sql>

    <sql id="Conditions">
        <where>
            <if test="ids != null and ids.size > 0">
                AND Meeting.Id IN
                <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="id != null ">
                and Meeting.id = #{id}
            </if>
            <if test="name != null and name != '' ">
                and Meeting.name like CONCAT('%','${name}', '%')
            </if>
            <if test="content != null and content != '' ">
                and Meeting.content = #{content}
            </if>
            <if test="roomId != null ">
                and Meeting.room_id = #{roomId}
            </if>
            <if test="accountIds != null and accountIds.size()>0 ">
                and
                <foreach collection="accountIds" item="item" index="index" open="(" separator="or" close=")">
                    FIND_IN_SET(#{item}, Meeting.account_ids)
                </foreach>
            </if>
            <if test="createTime != null ">
                and Meeting.create_time = #{createTime}
            </if>
            <if test="startCreateTime != null and startCreateTime > 0">
                and Meeting.create_time >= #{startCreateTime}
            </if>
            <if test="endCreateTime != null and endCreateTime > 0">
                <![CDATA[ and Meeting.create_time < #{endCreateTime} ]]>
            </if>
            <if test="updateTime != null ">
                and Meeting.update_time = #{updateTime}
            </if>
            <if test="startUpdateTime != null and startUpdateTime > 0">
                and Meeting.update_time >= #{startUpdateTime}
            </if>
            <if test="endUpdateTime != null and endUpdateTime > 0">
                <![CDATA[ and Meeting.update_time < #{endUpdateTime} ]]>
            </if>
            <if test="roomId != null and roomId > -1 ">
                and Room.id = #{roomId}
            </if>
            <if test="roomName != null and roomName != '' ">
                and Room.name like CONCAT('%','${roomName}', '%')
            </if>

        </where>
    </sql>

    <sql id="PageConditions">
        <if test="pageSize != null">
            limit #{pageSize}
        </if>
        <if test="offset != null">
            offset #{offset}
        </if>
    </sql>

    <!--插入一条数据-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into meeting(name, content, room_id, account_ids, create_time, update_time, face_image)
        values ( #{name}
               , #{content}
               , #{roomId}
               , #{accountIds, typeHandler=com.senior.dao.typehandler.DelimitedLongTypeHandler}
               , #{createTime}
               , #{updateTime}
               , #{faceImage})
    </insert>

    <!--根据主键id删除-->
    <delete id="deleteById">
        delete
        from meeting
        where id = #{id}
    </delete>

    <!--根据主键id更新一条数据-->
    <update id="updateById">
        update meeting
        <set>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="roomId != null">
                room_id = #{roomId},
            </if>
            <if test="accountIds != null">
                account_ids = #{accountIds,typeHandler=com.senior.dao.typehandler.DelimitedLongTypeHandler},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--根据id查询单条数据-->
    <select id="getById" resultMap="MeetingMap">
        select
        <include refid="Base_Column"/>
        from meeting Meeting
        where id = #{id}
    </select>

    <!--根据id列表查询数据-->
    <select id="getByIds" resultMap="MeetingMap">
        select
        <include refid="Base_Column"/>
        from meeting Meeting
        where id IN (
        <foreach item="item" index="index" collection="ids" separator=",">
            #{item}
        </foreach>
        )
    </select>

    <!--根据条件查询数据列表-->
    <select id="queryList" resultMap="MeetingMap">
        select
        <include refid="Base_Column"/>
        from meeting Meeting
        left join room Room on Room.id = Meeting.room_id
        <include refid="Conditions"/>
        order by Meeting.create_time desc
        <include refid="PageConditions"/>
    </select>

    <!--根据条件查询数据并按日期聚合-->
    <select id="groupBy" resultMap="MeetingMap">
        select count(*) count
        <if test="groupType != null">
            <choose>
                <when test="groupType == @com.senior.common.enums.GroupType@MONTH">
                    ,FROM_UNIXTIME(Meeting.create_time / 1000, '%Y-%m') AS date
                </when>
                <when test="groupType == @com.senior.common.enums.GroupType@DAY">
                    ,FROM_UNIXTIME(Meeting.create_time / 1000, '%Y-%m-%d') AS date
                </when>
                <when test="groupType == @com.senior.common.enums.GroupType@HOURS">
                    ,FROM_UNIXTIME(Meeting.create_time / 1000, '%H') AS date
                </when>
                <otherwise>
                    ,FROM_UNIXTIME(Meeting.create_time / 1000, '%Y-%m-%d') AS date
                </otherwise>
            </choose>
            <if test="groupFields != null and groupFields.size > 0">
                <foreach collection="groupFields" item="item" index="index" open="," separator="," close=" ">
                    ${item}
                </foreach>
            </if>
        </if>
        from meeting Meeting
        <include refid="Conditions"/>
        group by date
        <if test="groupFields != null and groupFields.size > 0">
            <foreach collection="groupFields" item="item" index="index" open="," separator=","
                     close=" ">
                ${item}
            </foreach>
        </if>
    </select>

    <!--根据条件查询数据条数-->
    <select id="queryCount" resultType="Long">
        select
        count(*)
        from meeting Meeting
        left join room Room on Room.id = Meeting.room_id
        <include refid="Conditions"/>
    </select>

</mapper>
